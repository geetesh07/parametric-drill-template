
import { DrillParameters } from '@/types/drill';

// Generate JSCAD parametric 2D model with drill parameters
export const generateJscadModel = (parameters: DrillParameters): string => {
  const { 
    diameter, 
    length, 
    shankDiameter, 
    shankLength,
    fluteLength,
    fluteCount,
    helixAngle,
    material,
    tipAngle,
    tolerance 
  } = parameters;

  // Create a JavaScript function that returns JSCAD code
  const jscadCode = `
/*
 * Parametric Drill Model for AutoCAD
 * Generated by Drill Designer Pro
 * 
 * HOW TO USE THIS FILE:
 * 1. Go to https://openjscad.xyz/
 * 2. Upload this file or paste its contents into the editor
 * 3. Click "Generate" to render the model
 * 4. Export as DXF from the download options
 * 5. Open the exported DXF in AutoCAD
 */

// Main parameters
const params = {
  diameter: ${diameter},
  length: ${length},
  shankDiameter: ${shankDiameter},
  shankLength: ${shankLength},
  fluteLength: ${fluteLength},
  fluteCount: ${fluteCount},
  helixAngle: ${helixAngle},
  tipAngle: ${tipAngle},
  material: "${material}",
  tolerance: "${tolerance}"
};

// Main function to generate the drill model
function main() {
  // Create the basic drill profile
  const drillProfile = createDrillProfile(params);
  
  // Create different views
  const sideDrill = drawSideView(params);
  const topDrill = drawTopView(params);
  
  // Position the views for a proper technical drawing layout
  const positionedSide = translate([0, -50, 0], sideDrill);
  const positionedTop = translate([0, 50, 0], topDrill);
  
  // Combine all views
  return [positionedSide, positionedTop, createDimensions(params)];
}

// Function to create the basic drill profile
function createDrillProfile(params) {
  const { diameter, length, shankDiameter, shankLength, fluteLength, tipAngle } = params;
  
  // Calculate tip height based on diameter and angle
  const tipHeight = (diameter / 2) / Math.tan((tipAngle / 2) * Math.PI / 180);
  
  // Create point arrays for the drill outline
  let points = [];
  
  // Start with the shank (bottom left corner)
  points.push([-length/2, -shankDiameter/2]);
  
  // Bottom edge
  points.push([-length/2 + shankLength, -shankDiameter/2]);
  points.push([-length/2 + shankLength, -diameter/2]);
  points.push([length/2 - tipHeight, -diameter/2]);
  
  // Tip point
  points.push([length/2, 0]);
  
  // Top edge (mirror of bottom)
  points.push([length/2 - tipHeight, diameter/2]);
  points.push([-length/2 + shankLength, diameter/2]);
  points.push([-length/2 + shankLength, shankDiameter/2]);
  points.push([-length/2, shankDiameter/2]);
  
  // Close the path
  points.push([-length/2, -shankDiameter/2]);
  
  return polygon({ points: points });
}

// Function to draw the side view of the drill
function drawSideView(params) {
  const { diameter, length, shankDiameter, shankLength, fluteLength, tipAngle, fluteCount, helixAngle } = params;
  
  // Calculate tip height based on diameter and angle
  const tipHeight = (diameter / 2) / Math.tan((tipAngle / 2) * Math.PI / 180);
  
  // Create the outline
  const outline = createDrillProfile(params);
  
  // Add flute representation
  const flutes = drawFlutes(params);
  
  // Combine all elements
  return [outline, flutes];
}

// Function to draw flutes representation
function drawFlutes(params) {
  const { diameter, length, shankLength, fluteLength, fluteCount, helixAngle } = params;
  
  let allFlutes = [];
  
  // Calculate helix pitch based on helix angle
  const helixPitch = Math.PI * diameter / Math.tan((helixAngle * Math.PI) / 180);
  
  // Draw one line per flute for the side view
  for (let i = 0; i < fluteCount; i++) {
    const phaseOffset = (2 * Math.PI * i) / fluteCount;
    
    // Create points for the helical curve
    let helixPoints = [];
    const segments = 30;
    
    for (let j = 0; j <= segments; j++) {
      const t = j / segments;
      const x = -length/2 + shankLength + t * fluteLength;
      
      // Calculate y with sinusoidal representation of the helix
      const y = (diameter/2) * Math.sin(t * 6 * Math.PI + phaseOffset);
      
      helixPoints.push([x, y]);
    }
    
    // Create a path for this flute
    allFlutes.push(path(helixPoints));
  }
  
  return allFlutes;
}

// Function to draw the top view of the drill
function drawTopView(params) {
  const { diameter, fluteCount } = params;
  
  // Create a circle for the drill body
  const body = circle({ radius: diameter/2 });
  
  // Create flute representations in top view
  let flutes = [];
  for (let i = 0; i < fluteCount; i++) {
    const angle = (2 * Math.PI * i) / fluteCount;
    const x = (diameter/2) * 0.7 * Math.cos(angle);
    const y = (diameter/2) * 0.7 * Math.sin(angle);
    
    // Create a small circle to represent the flute in top view
    const fluteCircle = circle({ radius: diameter/10 });
    flutes.push(translate([x, y], fluteCircle));
  }
  
  return [body, ...flutes];
}

// Function to add dimensions
function createDimensions(params) {
  const { diameter, length, shankDiameter, shankLength, fluteLength, material } = params;
  
  let dimensions = [];
  
  // Add text for labels
  dimensions.push(text({ text: \`Diameter: \${diameter}mm\`, size: 5 }));
  dimensions.push(translate([0, -10], text({ text: \`Length: \${length}mm\`, size: 5 })));
  dimensions.push(translate([0, -20], text({ text: \`Shank: \${shankDiameter}mm\`, size: 5 })));
  dimensions.push(translate([0, -30], text({ text: \`Material: \${material}\`, size: 5 })));
  
  return translate([0, -80], dimensions);
}

// Return the main function
return main;
  `;

  return jscadCode;
};

// Function to generate a README file with instructions for JSCAD
export const generateJSCADReadme = (parameters: DrillParameters, fileName: string): string => {
  return `# How to Use This JSCAD File

This file (\`${fileName}.js\`) contains a parametric model of a drill bit with the following specifications:

- Diameter: ${parameters.diameter} mm
- Overall Length: ${parameters.length} mm
- Shank Diameter: ${parameters.shankDiameter} mm
- Flute Count: ${parameters.fluteCount}
- Material: ${parameters.material.toUpperCase()}

## To View and Export to AutoCAD:

1. Go to the OpenJSCAD website: https://openjscad.xyz/
2. Upload this JavaScript file or paste its contents into the editor
3. Click "Generate" to render the model
4. Once rendered, click "Export" and select "DXF" format
5. Download the DXF file
6. Open the DXF file in AutoCAD

## Alternative Method:

If OpenJSCAD doesn't work for you, try:
1. Install FreeCAD (https://www.freecad.org/)
2. Use the OpenSCAD workbench to import this script
3. Export as DXF from FreeCAD
4. Open in AutoCAD

## Modifying Parameters:

You can modify the parameters at the top of the file to customize the drill design:

\`\`\`javascript
const params = {
  diameter: ${parameters.diameter},
  length: ${parameters.length},
  shankDiameter: ${parameters.shankDiameter},
  shankLength: ${parameters.shankLength},
  fluteLength: ${parameters.fluteLength},
  fluteCount: ${parameters.fluteCount},
  helixAngle: ${parameters.helixAngle},
  tipAngle: ${parameters.tipAngle},
  material: "${parameters.material}",
  tolerance: "${parameters.tolerance}"
};
\`\`\`

Modify these values and regenerate the model in OpenJSCAD.

## Technical Support

For questions about this file, refer to the Drill Designer Pro documentation.
`;
};
